<div>
    <form id="simple-contact-form-lead" action="#" method="POST" class="space-y-6 bg-white p-6 rounded-xl shadow-md">
      <div>
        <label for="name" class="block text-sm font-medium text-gray-700">Vardas</label>
        <input type="text" name="name" id="name" required class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-[#C81F6A] focus:border-[#C81F6A]">
      </div>

      <div>
        <label for="email" class="block text-sm font-medium text-gray-700">El. paštas</label>
        <input type="email" name="email" id="email" required class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-[#C81F6A] focus:border-[#C81F6A]">
      </div>

      <div>
        <label for="message" class="block text-sm font-medium text-gray-700">Žinutė</label>
        <textarea name="message" id="message" rows="4" required class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-[#C81F6A] focus:border-[#C81F6A]"></textarea>
      </div>

      <button type="submit" class="w-full bg-[#C81F6A] text-white py-2 px-4 rounded-md hover:bg-pink-700 transition">Siųsti užklausą</button>
    </form>

    <div id="responseMessage" class="mt-4 text-center text-sm"></div>
  </div>
</div>


<script is:inline>
    // Get the form and response message element
    const form = document.getElementById('simple-contact-form-lead');
    const responseMessage = document.getElementById('responseMessage');
  
    // Add an event listener for form submission
    form.addEventListener('submit', async (event) => {
      // Prevent the default form submission behavior (page reload)
      event.preventDefault();
  
      // Collect form data
      const formData = new FormData(form);
      const data = Object.fromEntries(formData.entries());
      
  
      // Display a loading message
      responseMessage.textContent = 'Submitting...';
      responseMessage.className = 'mt-4 text-center text-sm text-gray-600'; // Reset class
  
      try {
        // Send the data to the Astro API route using fetch
        const response = await fetch('/api/crm', { // This path should match your API route
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(data), // Convert the JavaScript object to a JSON string
        });
  
        // Parse the JSON response from the API route
        const result = await response.json();
  
        // Update the response message based on the API's response
        if (response.ok) { // Check if the HTTP status is 200-299
          responseMessage.textContent = `Ačiū: ${result.message}`;
          responseMessage.className = 'mt-4 text-center text-sm text-green-600';
          form.reset(); // Clear the form fields on success
        } else {
          responseMessage.textContent = `Klaida: ${result.message || 'Something went wrong!'}`;
          responseMessage.className = 'mt-4 text-center text-sm text-red-600';
        }
      } catch (error) {
        // Handle any network errors or issues during the fetch request
        console.error('Fetch error:', error);
        responseMessage.textContent = 'Network error. Please try again.';
        responseMessage.className = 'mt-4 text-center text-sm text-red-600';
      }
    });
  </script>