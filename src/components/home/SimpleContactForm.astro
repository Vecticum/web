---
---

<div>
  <form id="simple-contact-form-lead" action="#" method="POST" class="space-y-6 bg-white p-6 rounded-xl shadow-md">
    <!-- Hidden field for form source -->
    <input type="hidden" name="form_source" value="Leads iš kontaktų puslapio">
    <div id="responseMessage" class="mt-4 text-center"></div>
    <div>
      <label for="name" class="block text-sm font-medium text-gray-700">Vardas</label>
      <div class="relative">
        <input type="text" name="name" id="name" required class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-[#C81F6A] focus:border-[#C81F6A]">
        <span id="name-error" class="absolute text-xs text-red-600 mt-1"></span>
      </div>
    </div>

    <div>
      <label for="email" class="block text-sm font-medium text-gray-700">El. paštas</label>
      <div class="relative">
        <input type="email" name="email" id="email" required class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-[#C81F6A] focus:border-[#C81F6A]">
        <span id="email-error" class="absolute text-xs text-red-600 mt-1"></span>
      </div>
    </div>

    <div>
      <label for="message" class="block text-sm font-medium text-gray-700">Žinutė</label>
      <div class="relative">
        <textarea name="message" id="message" rows="4" required class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-[#C81F6A] focus:border-[#C81F6A]"></textarea>
        <span id="message-error" class="absolute text-xs text-red-600 mt-1"></span>
      </div>
    </div>

    <!-- Honeypot field - hidden from users, only bots will fill it -->
    <div style="position: absolute; left: -9999px; top: -9999px;">
      <label for="website">Website (leave empty)</label>
      <input type="text" name="website" id="website" tabindex="-1" autocomplete="off">
    </div>

    <!-- reCAPTCHA v3 - invisible -->

    <button type="submit" class="w-full bg-[#C81F6A] text-white py-2 px-4 rounded-md hover:bg-pink-700 transition">Siųsti užklausą</button>
  </form>
</div>

<script is:inline>
  // Get the form and response message elements
  const form = document.getElementById('simple-contact-form-lead');
  const responseMessage = document.getElementById('responseMessage');
  const submitButton = form.querySelector('button[type="submit"]');
  const nameInput = form.querySelector('#name');
  const emailInput = form.querySelector('#email');
  const messageInput = form.querySelector('#message');
  const nameError = document.getElementById('name-error');
  const emailError = document.getElementById('email-error');
  const messageError = document.getElementById('message-error');

  // Function to validate form fields and show errors
  function validateForm() {
    let isValid = true;
    if (!nameInput.value.trim()) {
      nameInput.classList.add('border-red-500');
      nameError.textContent = 'Prašome įvesti vardą.';
      isValid = false;
    } else {
      nameInput.classList.remove('border-red-500');
      nameError.textContent = '';
    }
    if (!emailInput.value.trim()) {
      emailInput.classList.add('border-red-500');
      emailError.textContent = 'Prašome įvesti el. paštą.';
      isValid = false;
    } else {
      emailInput.classList.remove('border-red-500');
      emailError.textContent = '';
    }
    if (!messageInput.value.trim()) {
      messageInput.classList.add('border-red-500');
      messageError.textContent = 'Prašome įvesti žinutę.';
      isValid = false;
    } else {
      messageInput.classList.remove('border-red-500');
      messageError.textContent = '';
    }
    return isValid;
  }

  // Add an event listener for form submission
  let isSubmitting = false; // Prevent duplicate submissions
  form.addEventListener('submit', async (event) => {
    event.preventDefault();
    
    // Prevent duplicate submissions
    if (isSubmitting) {
      console.log('Form submission already in progress, ignoring duplicate submission');
      return;
    }
    
    isSubmitting = true;
    const submitButton = form.querySelector('button[type="submit"]');
    if (submitButton) {
      submitButton.disabled = true;
    }

    // Validate form
    if (!validateForm()) {
      isSubmitting = false;
      if (submitButton) {
        submitButton.disabled = false;
      }
      return; // Stop submission if validation fails
    }

    // Show loading indicator
    responseMessage.innerHTML = `
      <div class="bg-gray-100 border border-gray-400 text-gray-700 px-4 py-3 rounded-md shadow-lg flex items-center justify-center" role="alert">
        <svg class="animate-spin h-5 w-5 mr-2 text-gray-600" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
          <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
          <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4z"></path>
        </svg>
        <span>Apdorojama...</span>
      </div>
    `;

    // Collect form data
    const formData = new FormData(form);

    // reCAPTCHA v3 validation (optional in development)
    let recaptchaToken = null;
    const isDevelopment = window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1';
    
    if (typeof grecaptcha !== 'undefined' && grecaptcha.execute) {
      try {
        recaptchaToken = await grecaptcha.execute('6LcP6_ArAAAAAGeVnrM_7mlRq2cjrC6l4Xifj0qQ', {action: 'simple_contact_form_submit'});
        console.log('reCAPTCHA token generated successfully');
      } catch (recaptchaError) {
        console.error('reCAPTCHA validation failed:', recaptchaError);
        if (!isDevelopment) {
          responseMessage.innerHTML = `
            <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded-md shadow-lg" role="alert">
              <strong class="font-bold">Klaida!</strong> <span>Saugumo patikrinimas nepavyko. Bandykite dar kartą.</span>
            </div>
          `;
          isSubmitting = false;
          const submitButton = form.querySelector('button[type="submit"]');
          if (submitButton) {
            submitButton.disabled = false;
          }
          return;
        }
      }
    } else if (!isDevelopment) {
      console.error('reCAPTCHA not loaded properly');
      responseMessage.innerHTML = `
        <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded-md shadow-lg" role="alert">
          <strong class="font-bold">Klaida!</strong> <span>reCAPTCHA neįkėlė tinkamai. Perkraukite puslapį ir bandykite dar kartą.</span>
        </div>
      `;
      isSubmitting = false;
      const submitButton = form.querySelector('button[type="submit"]');
      if (submitButton) {
        submitButton.disabled = false;
      }
      return;
    } else {
      console.log('Development mode: reCAPTCHA not available, skipping');
    }

    const data = Object.fromEntries(formData.entries());
    
    // Ensure form_source is set
    data.form_source = data.form_source || 'Leads iš kontaktų puslapio';

    try {
      // Prepare headers
      const headers = {
        'Content-Type': 'application/json'
      };
      
      // Add reCAPTCHA token to headers if available
      if (recaptchaToken) {
        headers['X-Recaptcha-Token'] = recaptchaToken;
      }
      
      const response = await fetch('/api/crm', {
        method: 'POST',
        headers: headers,
        body: JSON.stringify(data),
      });

      console.log('Response status:', response.status);
      
      const text = await response.text();
      console.log('Raw response:', text);
      
      let result = {};
      if (text) {
        try {
          result = JSON.parse(text);
        } catch (parseError) {
          console.error('Failed to parse response JSON:', parseError);
          result = { message: 'Serverio atsakymo klaida' };
        }
      }
      
      console.log('API response:', response.status, result);

      if (response.ok) {
        responseMessage.innerHTML = `
          <div class="sticky top-0 left-0 w-full z-[99999] bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded-md shadow-lg animate-fade-in" role="alert">
            <div class="max-w-2xl mx-auto flex items-center justify-between">
              <div>
                <span>Jūsų užklausa sėkmingai išsiųsta. Atsakysime kaip įmanoma greičiau.</span>
              </div>
              <button id="closeSuccess" class="ml-4 text-green-700 hover:text-green-900 text-xl font-bold">&times;</button>
            </div>
          </div>
        `;
        form.reset();
        const closeButton = document.getElementById('closeSuccess');
        closeButton.addEventListener('click', () => {
          responseMessage.innerHTML = '';
          responseMessage.classList.add('hidden');
        });
      } else {
        // Get error message from response
        let errorMessage = 'Įvyko klaida. Bandykite dar kartą.';
        try {
          if (result && result.message) {
            errorMessage = result.message;
          }
        } catch (e) {
          console.log('Failed to parse error message:', e);
        }
        
        responseMessage.innerHTML = `
          <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded-md shadow-lg" role="alert">
            <strong class="font-bold">Klaida!</strong> <span>${errorMessage}</span>
          </div>
        `;
      }
    } catch (error) {
      console.error('Error during fetch:', error);
      responseMessage.innerHTML = `
        <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded-md shadow-lg" role="alert">
          <strong class="font-bold">Klaida!</strong> <span>Tinklo klaida. Pabandykite dar kartą.</span>
        </div>
      `;
    } finally {
      isSubmitting = false; // Reset submission state
      const submitButton = form.querySelector('button[type="submit"]');
      if (submitButton) {
        submitButton.disabled = false;
      }
    }
  });

  // Add input event listeners to clear errors on change
  [nameInput, emailInput, messageInput].forEach(input => {
    input.addEventListener('input', () => {
      if (input.value.trim()) {
        input.classList.remove('border-red-500');
        document.getElementById(`${input.id}-error`).textContent = '';
      }
    });
  });
</script>

<style is:inline>
  .animate-fade-in {
    animation: fadeIn 0.5s ease-in;
  }

  @keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
  }

  .animate-spin {
    animation: spin 1s linear infinite;
  }

  @keyframes spin {
    from { transform: rotate(0deg); }
    to { transform: rotate(360deg); }
  }
</style>